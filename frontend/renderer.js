// Configura√ß√µes da aplica√ß√£o
const CONFIG = {
    API_BASE_URL: 'http://127.0.0.1:5000',
    CHECK_INTERVAL: 5000, // 5 segundos
    TIMEOUT: 30000 // 30 segundos
};

// Elementos DOM
const elements = {
    inputPath: document.getElementById('inputPath'),
    outputFolder: document.getElementById('outputFolder'),
    selectFileBtn: document.getElementById('selectFileBtn'),
    selectFolderBtn: document.getElementById('selectFolderBtn'),
    selectOutputFolderBtn: document.getElementById('selectOutputFolderBtn'),
    transformBtn: document.getElementById('transformBtn'),
    clearBtn: document.getElementById('clearBtn'),
    openFolderBtn: document.getElementById('openFolderBtn'),
    statusMessage: document.getElementById('statusMessage'),
    progressBar: document.getElementById('progressBar'),
    resultCard: document.getElementById('resultCard'),
    resultContent: document.getElementById('resultContent'),
    // Bot√µes da barra de t√≠tulo
    minimizeBtn: document.getElementById('minimizeBtn'),
    maximizeBtn: document.getElementById('maximizeBtn'),
    closeBtn: document.getElementById('closeBtn'),
    // Bot√£o de tema
    themeToggleBtn: document.getElementById('themeToggleBtn')
};

// Estado da aplica√ß√£o
let appState = {
    selectedPath: null,
    selectedFolder: null,
    isProcessing: false,
    serverOnline: false,
    currentTheme: 'light', // 'light' ou 'dark'
    lastOutputFolder: null // Armazenar a √∫ltima pasta de sa√≠da usada
};

// Inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
    startServerHealthCheck();
    initializeUpdateLog();
    
    // Configurar listener para quando a aplica√ß√£o estiver pronta
    if (window.electronAPI && window.electronAPI.onAppReady) {
        window.electronAPI.onAppReady(() => {
            console.log('üöÄ Aplica√ß√£o principal carregada!');
            // Inicializar funcionalidades que dependem da aplica√ß√£o principal
            initializePythonControl();
            
            // Iniciar servidor Python automaticamente ap√≥s um pequeno delay
            setTimeout(() => {
                startPythonServerAutomatically();
            }, 1000);
        });
    }
});

function initializeApp() {
    console.log('üöÄ Inicializando aplica√ß√£o...');
    loadTheme();
    updateUI();
    checkServerHealth();
    initializeConfigTab();
}

function setupEventListeners() {
    console.log('üîß Configurando event listeners...');
    console.log('üîç Elementos encontrados:', {
        minimizeBtn: elements.minimizeBtn ? 'encontrado' : 'n√£o encontrado',
        maximizeBtn: elements.maximizeBtn ? 'encontrado' : 'n√£o encontrado',
        closeBtn: elements.closeBtn ? 'encontrado' : 'n√£o encontrado',
        themeToggleBtn: elements.themeToggleBtn ? 'encontrado' : 'n√£o encontrado'
    });
    
    // Bot√µes de sele√ß√£o
    elements.selectFileBtn.addEventListener('click', selectFile);
    elements.selectFolderBtn.addEventListener('click', selectFolder);
    elements.selectOutputFolderBtn.addEventListener('click', selectOutputFolder);
    
    // Bot√£o de transformar
    elements.transformBtn.addEventListener('click', transformFile);
    
    // Bot√£o de limpar
    elements.clearBtn.addEventListener('click', clearForm);
    
    // Bot√£o de abrir pasta
    elements.openFolderBtn.addEventListener('click', openOutputFolder);
    
    // Bot√µes da barra de t√≠tulo
    if (elements.minimizeBtn) {
        elements.minimizeBtn.addEventListener('click', () => {
            console.log('ü™ü Minimizando janela...');
            window.electronAPI.minimizeWindow();
        });
    }
    
    if (elements.maximizeBtn) {
        elements.maximizeBtn.addEventListener('click', () => {
            console.log('ü™ü Maximizando janela...');
            window.electronAPI.maximizeWindow();
        });
    }
    
    if (elements.closeBtn) {
        elements.closeBtn.addEventListener('click', () => {
            console.log('ü™ü Fechando janela...');
            window.electronAPI.closeWindow();
        });
    }
    
    // Bot√£o de tema
    if (elements.themeToggleBtn) {
        elements.themeToggleBtn.addEventListener('click', toggleTheme);
    }
    
    // Sistema de abas
    setupTabs();
    
    // Link do GitHub
    setupGitHubLink();
    
    
    // Mudan√ßas nos inputs
    elements.inputPath.addEventListener('change', updateUI);
    elements.outputFolder.addEventListener('change', updateUI);
    
    
}

// Sele√ß√£o de arquivos e pastas
async function selectFile() {
    try {
        console.log('üìÇ Abrindo seletor de arquivo...');
        
        // Usar API do Electron para sele√ß√£o de arquivo
        const result = await window.electronAPI.selectFile();
        
        if (result && result.filePaths && result.filePaths.length > 0) {
            const filePath = result.filePaths[0];
            elements.inputPath.value = filePath;
            appState.selectedPath = filePath;
            updateUI();
            
            console.log('‚úÖ Arquivo selecionado:', filePath);
        }
    } catch (error) {
        console.error('‚ùå Erro ao selecionar arquivo:', error);
        showStatus('Erro ao selecionar arquivo', 'error');
    }
}

async function selectFolder() {
    try {
        console.log('üìÅ Abrindo seletor de pasta de entrada...');
        console.log('üîç Verificando API do Electron:', window.electronAPI);
        
        if (!window.electronAPI) {
            throw new Error('API do Electron n√£o est√° dispon√≠vel');
        }
        
        if (!window.electronAPI.selectFolder) {
            throw new Error('Fun√ß√£o selectFolder n√£o est√° dispon√≠vel');
        }
        
        // Usar API do Electron para sele√ß√£o de pasta
        const result = await window.electronAPI.selectFolder();
        console.log('üìÅ Resultado da sele√ß√£o:', result);
        
        if (result && result.filePaths && result.filePaths.length > 0) {
            const folderPath = result.filePaths[0];
            elements.inputPath.value = folderPath;
            appState.selectedPath = folderPath;
            updateUI();
            
            console.log('‚úÖ Pasta de entrada selecionada:', folderPath);
        } else {
            console.log('‚ÑπÔ∏è Sele√ß√£o cancelada pelo usu√°rio');
        }
    } catch (error) {
        console.error('‚ùå Erro ao selecionar pasta:', error);
        showStatus('Erro ao selecionar pasta: ' + error.message, 'error');
    }
}

async function selectOutputFolder() {
    try {
        console.log('üìÅ Abrindo seletor de pasta de sa√≠da...');
        console.log('üîç Verificando API do Electron:', window.electronAPI);
        
        if (!window.electronAPI) {
            throw new Error('API do Electron n√£o est√° dispon√≠vel');
        }
        
        if (!window.electronAPI.selectOutputFolder) {
            throw new Error('Fun√ß√£o selectOutputFolder n√£o est√° dispon√≠vel');
        }
        
        // Usar API do Electron para sele√ß√£o de pasta de sa√≠da
        const result = await window.electronAPI.selectOutputFolder();
        console.log('üìÅ Resultado da sele√ß√£o:', result);
        
        if (result && result.filePaths && result.filePaths.length > 0) {
            const folderPath = result.filePaths[0];
            elements.outputFolder.value = folderPath;
            appState.selectedFolder = folderPath;
            updateUI();
            
            console.log('‚úÖ Pasta de sa√≠da selecionada:', folderPath);
        } else {
            console.log('‚ÑπÔ∏è Sele√ß√£o cancelada pelo usu√°rio');
        }
    } catch (error) {
        console.error('‚ùå Erro ao selecionar pasta de sa√≠da:', error);
        showStatus('Erro ao selecionar pasta de sa√≠da: ' + error.message, 'error');
    }
}

// Transforma√ß√£o do arquivo
async function transformFile() {
    if (!appState.selectedPath || !appState.selectedFolder) {
        showStatus('Selecione arquivo(s)/pasta e uma pasta de sa√≠da', 'error');
        return;
    }
    
    if (appState.isProcessing) {
        return;
    }
    
    // Verificar se o servidor Python est√° funcionando
    if (!appState.serverOnline) {
        showStatus('Servidor Python n√£o est√° funcionando. Tentando iniciar...', 'warning');
        
        // Tentar iniciar o servidor Python
        const pythonStarted = await startPythonServer();
        if (!pythonStarted) {
            showStatus('Erro: N√£o foi poss√≠vel iniciar o servidor Python. Verifique as configura√ß√µes.', 'error');
            return;
        }
        
        // Aguardar um pouco para o servidor ficar pronto
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Verificar novamente se est√° funcionando
        const isServerOnline = await checkServerHealth();
        if (!isServerOnline) {
            showStatus('Erro: Servidor Python n√£o respondeu ap√≥s inicializa√ß√£o.', 'error');
            return;
        }
    }
    
    try {
        appState.isProcessing = true;
        updateUI();
        
        showStatus('Transformando arquivo(s) de balancete...', 'processing');
        showProgress(true);
        
        console.log('üîÑ Iniciando transforma√ß√£o...');
        console.log('üìÅ Caminho de entrada:', appState.selectedPath);
        console.log('üìÇ Pasta de sa√≠da:', appState.selectedFolder);
        
        const response = await fetch(`${CONFIG.API_BASE_URL}/process-file`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                inputPath: appState.selectedPath,
                outputFolder: appState.selectedFolder,
                operation: 'balancete'
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Armazenar a pasta de sa√≠da para o bot√£o "Abrir Pasta"
            appState.lastOutputFolder = appState.selectedFolder;
            showStatus(data.message, 'success');
            showResult(data);
            console.log('‚úÖ Transforma√ß√£o conclu√≠da:', data);
        } else {
            showStatus(data.message || 'Erro na transforma√ß√£o', 'error');
            console.error('‚ùå Erro na transforma√ß√£o:', data);
        }
        
    } catch (error) {
        console.error('‚ùå Erro na requisi√ß√£o:', error);
        showStatus('Erro de comunica√ß√£o com o servidor', 'error');
    } finally {
        appState.isProcessing = false;
        showProgress(false);
        updateUI();
    }
}

// Verifica√ß√£o de sa√∫de do servidor
async function checkServerHealth() {
    try {
        const response = await fetch(`${CONFIG.API_BASE_URL}/health`, {
            method: 'GET',
            timeout: 5000
        });
        
        if (response.ok) {
            const data = await response.json();
            appState.serverOnline = true;
            console.log('‚úÖ Servidor online:', data);
            updateUI(); // Atualizar UI quando servidor estiver online
            updateServerStatusDisplay(true); // Atualizar aba de configura√ß√µes
            return true;
        } else {
            throw new Error('Servidor n√£o respondeu');
        }
    } catch (error) {
        appState.serverOnline = false;
        console.warn('‚ö†Ô∏è Servidor offline:', error.message);
        updateUI(); // Atualizar UI quando servidor estiver offline
        updateServerStatusDisplay(false); // Atualizar aba de configura√ß√µes
        return false;
    }
}

function startServerHealthCheck() {
    // Verificar sa√∫de do servidor a cada 5 segundos
    setInterval(checkServerHealth, CONFIG.CHECK_INTERVAL);
}

// Atualiza√ß√£o da interface
function updateUI() {
    // Bot√£o sempre ativo, s√≥ desabilitar se estiver processando
    const isProcessing = appState.isProcessing;
    
    elements.transformBtn.disabled = isProcessing;
    
    if (isProcessing) {
        elements.transformBtn.innerHTML = '<span class="loading"></span> Transformando...';
    } else {
        elements.transformBtn.innerHTML = 'üîÑ Transformar Balancete';
    }
    
    // Bot√£o sempre com apar√™ncia ativa quando n√£o est√° processando
    elements.transformBtn.style.opacity = '1';
    elements.transformBtn.style.cursor = 'pointer';
    
    // Atualizar mensagem de status
    if (isProcessing) {
        showStatus('Transformando...', 'processing');
    } else {
        showStatus('Clique em "Transformar Balancete" para come√ßar!', 'info');
    }
}


// Exibi√ß√£o de status e resultados
function showStatus(message, type = 'info') {
    elements.statusMessage.textContent = message;
    elements.statusMessage.className = `status-message ${type}`;
}

function showProgress(show) {
    elements.progressBar.style.display = show ? 'block' : 'none';
    
    if (show) {
        // Simular progresso
        let progress = 0;
        const interval = setInterval(() => {
            progress += Math.random() * 15;
            if (progress >= 100) {
                progress = 100;
                clearInterval(interval);
            }
            elements.progressBar.querySelector('.progress-fill').style.width = progress + '%';
        }, 200);
    }
}

function showResult(data) {
    elements.resultCard.style.display = 'block';
    
    // Mostrar bot√£o "Abrir Pasta" se houver pasta de sa√≠da
    if (appState.lastOutputFolder) {
        elements.openFolderBtn.style.display = 'inline-flex';
    }
    
    // Criar HTML formatado para os resultados
    let resultHTML = '';
    
    if (data.result && data.result.processed_files) {
        resultHTML += '<div class="result-summary">';
        resultHTML += `<h3>üìä Resumo do Processamento</h3>`;
        resultHTML += `<p><strong>Total processado:</strong> ${data.result.processed_count} arquivo(s)</p>`;
        resultHTML += `<p><strong>Data/Hora:</strong> ${formatDate(data.timestamp)}</p>`;
        if (appState.lastOutputFolder) {
            resultHTML += `<p><strong>Pasta de sa√≠da:</strong> ${appState.lastOutputFolder}</p>`;
        }
        resultHTML += '</div>';
        
        resultHTML += '<div class="result-logs">';
        resultHTML += '<h3>üìã Log de Arquivos</h3>';
        
        // Processar arquivos com sucesso
        data.result.processed_files.forEach(file => {
            const fileName = file.inputFile.split('\\').pop().split('/').pop(); // Pegar apenas o nome do arquivo
            resultHTML += `<div class="log-entry success">`;
            resultHTML += `<span class="log-icon">‚úÖ</span>`;
            resultHTML += `<span class="log-file">${fileName}</span>`;
            resultHTML += `<span class="log-status">SUCESSO</span>`;
            resultHTML += `</div>`;
        });
        
        // Processar erros
        if (data.result.errors && data.result.errors.length > 0) {
            data.result.errors.forEach(error => {
                resultHTML += `<div class="log-entry error">`;
                resultHTML += `<span class="log-icon">‚ùå</span>`;
                resultHTML += `<span class="log-file">${extractFileNameFromError(error)}</span>`;
                resultHTML += `<span class="log-status">FALHA</span>`;
                resultHTML += `<div class="log-error-detail">Erro: ${error}</div>`;
                resultHTML += `</div>`;
            });
        }
        
        resultHTML += '</div>';
    } else {
        // Fallback para dados n√£o estruturados
        resultHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
    }
    
    elements.resultContent.innerHTML = resultHTML;
}

function extractFileNameFromError(errorMessage) {
    // Tentar extrair o nome do arquivo da mensagem de erro
    const match = errorMessage.match(/processar\s+([^:]+)/i);
    if (match) {
        return match[1];
    }
    return 'Arquivo desconhecido';
}

function clearForm() {
    elements.inputPath.value = '';
    elements.outputFolder.value = '';
    
    appState.selectedPath = null;
    appState.selectedFolder = null;
    appState.lastOutputFolder = null;
    
    elements.resultCard.style.display = 'none';
    elements.openFolderBtn.style.display = 'none';
    showStatus('Selecione arquivo(s)/pasta e uma pasta de sa√≠da para come√ßar');
    
    updateUI();
    
    console.log('üóëÔ∏è Formul√°rio limpo');
}

async function openOutputFolder() {
    try {
        console.log('üìÅ Abrindo pasta de sa√≠da:', appState.lastOutputFolder);
        
        if (!appState.lastOutputFolder) {
            showStatus('Nenhuma pasta de sa√≠da dispon√≠vel', 'error');
            return;
        }
        
        // Usar API do Electron para abrir pasta
        if (window.electronAPI && window.electronAPI.openFolder) {
            await window.electronAPI.openFolder(appState.lastOutputFolder);
            console.log('‚úÖ Pasta aberta com sucesso');
        } else {
            // Fallback: tentar abrir com shell do sistema
            const { shell } = require('electron');
            shell.openPath(appState.lastOutputFolder);
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao abrir pasta:', error);
        showStatus('Erro ao abrir pasta: ' + error.message, 'error');
    }
}

// Utilit√°rios
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function formatDate(dateString) {
    return new Date(dateString).toLocaleString('pt-BR');
}

// Tratamento de erros globais
window.addEventListener('error', function(event) {
    console.error('‚ùå Erro global:', event.error);
    showStatus('Ocorreu um erro inesperado', 'error');
});

window.addEventListener('unhandledrejection', function(event) {
    console.error('‚ùå Promise rejeitada:', event.reason);
    showStatus('Erro de comunica√ß√£o', 'error');
});

// Fun√ß√µes de controle de tema
function loadTheme() {
    const savedTheme = localStorage.getItem('app-theme') || 'light';
    appState.currentTheme = savedTheme;
    applyTheme(savedTheme);
    updateThemeIcon();
}

function toggleTheme() {
    appState.currentTheme = appState.currentTheme === 'light' ? 'dark' : 'light';
    applyTheme(appState.currentTheme);
    updateThemeIcon();
    localStorage.setItem('app-theme', appState.currentTheme);
    console.log(`üé® Tema alterado para: ${appState.currentTheme}`);
}

function applyTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
}

function updateThemeIcon() {
    const themeIcon = elements.themeToggleBtn.querySelector('.theme-icon');
    if (themeIcon) {
        themeIcon.textContent = appState.currentTheme === 'light' ? 'üåô' : '‚òÄÔ∏è';
    }
}

// Sistema de Abas
function setupTabs() {
    const tabButtons = document.querySelectorAll('.tab-button:not(.add-tab-btn)');
    const tabContents = document.querySelectorAll('.tab-content');
    const addTabBtn = document.getElementById('addTabBtn');
    
    console.log('üìë Elementos encontrados:', {
        tabButtons: tabButtons.length,
        tabContents: tabContents.length,
        addTabBtn: addTabBtn ? 'encontrado' : 'n√£o encontrado'
    });
    
    // Debug: listar todas as abas encontradas
    tabButtons.forEach((button, index) => {
        const tabId = button.getAttribute('data-tab');
        console.log(`üìë Aba ${index + 1}: ${tabId}`);
    });
    
    tabContents.forEach((content, index) => {
        console.log(`üìë Conte√∫do ${index + 1}: ${content.id}`);
    });
    
    // Event listeners para as abas
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tabId = button.getAttribute('data-tab');
            console.log('üìë Clicando na aba:', tabId);
            switchTab(tabId);
        });
    });
    
    // Event listener para adicionar nova aba
    if (addTabBtn) {
        addTabBtn.addEventListener('click', addNewTab);
    }
    
    console.log('üìë Sistema de abas configurado');
}

function switchTab(tabId) {
    console.log(`üîÑ Mudando para aba: ${tabId}`);
    
    // Remover classe active de todas as abas
    document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    
    // Adicionar classe active na aba selecionada
    const activeButton = document.querySelector(`[data-tab="${tabId}"]`);
    const activeContent = document.getElementById(`tab-${tabId}`);
    
    console.log(`üîç Elementos encontrados:`, {
        activeButton: activeButton ? 'encontrado' : 'n√£o encontrado',
        activeContent: activeContent ? 'encontrado' : 'n√£o encontrado'
    });
    
    if (activeButton && activeContent) {
        activeButton.classList.add('active');
        activeContent.classList.add('active');
        console.log(`‚úÖ Aba ativada: ${tabId}`);
        
        // Se for a aba de configura√ß√µes, atualizar informa√ß√µes
        if (tabId === 'configuracoes') {
            console.log('‚öôÔ∏è Atualizando informa√ß√µes da aba de configura√ß√µes...');
            loadAppInfo();
        }
    } else {
        console.error(`‚ùå Erro ao ativar aba: ${tabId}`);
        if (!activeButton) console.error(`‚ùå Bot√£o n√£o encontrado para: ${tabId}`);
        if (!activeContent) console.error(`‚ùå Conte√∫do n√£o encontrado para: tab-${tabId}`);
    }
}

function addNewTab() {
    const tabName = prompt('Nome da nova aba:');
    if (tabName) {
        const tabId = `tab-${Date.now()}`;
        const tabButton = document.createElement('button');
        tabButton.className = 'tab-button';
        tabButton.setAttribute('data-tab', tabId);
        tabButton.textContent = `üìÑ ${tabName}`;
        
        const tabContent = document.createElement('div');
        tabContent.className = 'tab-content';
        tabContent.id = `tab-${tabId}`;
        tabContent.innerHTML = `
            <div class="main-content">
                <div class="card">
                    <h2>üìÑ ${tabName}</h2>
                    <p>Nova aba personalizada</p>
                    <div class="action-buttons">
                        <button type="button" class="btn btn-primary">üöÄ Executar</button>
                    </div>
                </div>
            </div>
        `;
        
        // Adicionar antes do bot√£o de adicionar
        const addTabBtn = document.getElementById('addTabBtn');
        addTabBtn.parentNode.insertBefore(tabButton, addTabBtn);
        
        // Adicionar conte√∫do
        document.querySelector('.tabs-content').appendChild(tabContent);
        
        // Event listener para a nova aba
        tabButton.addEventListener('click', () => switchTab(tabId));
        
        // Ativar a nova aba
        switchTab(tabId);
        
        console.log(`üìë Nova aba criada: ${tabName}`);
    }
}

// Configurar link do GitHub
function setupGitHubLink() {
    const githubLink = document.getElementById('githubLink');
    if (githubLink) {
        githubLink.addEventListener('click', (event) => {
            event.preventDefault();
            console.log('üîó Abrindo GitHub no navegador padr√£o...');
            
            // Usar API do Electron para abrir no navegador padr√£o
            if (window.electronAPI && window.electronAPI.openExternal) {
                window.electronAPI.openExternal('https://github.com/AlexandreSilvestrin');
            } else {
                // Fallback: tentar usar shell do sistema
                const { shell } = require('electron');
                shell.openExternal('https://github.com/AlexandreSilvestrin');
            }
        });
        
        console.log('üîó Link do GitHub configurado');
    }
}


// ==================== SISTEMA DE ATUALIZA√á√ïES ====================

// Elementos DOM para atualiza√ß√µes
const updateElements = {
    currentVersion: document.getElementById('currentVersion'),
    updateStatus: document.getElementById('updateStatus'),
    mainCheckUpdatesBtn: document.getElementById('mainCheckUpdatesBtn'),
    checkUpdatesBtn: document.getElementById('checkUpdatesBtn'),
    downloadUpdateBtn: document.getElementById('downloadUpdateBtn'),
    installUpdateBtn: document.getElementById('installUpdateBtn'),
    updateProgress: document.getElementById('updateProgress'),
    updateProgressFill: document.getElementById('updateProgressFill'),
    updateProgressText: document.getElementById('updateProgressText'),
    updateMessage: document.getElementById('updateMessage')
};

// Elementos DOM para notifica√ß√£o de vers√£o
const versionElements = {
    notification: document.getElementById('versionNotification'),
    icon: document.getElementById('versionIcon'),
    text: document.getElementById('versionText'),
    actionBtn: document.getElementById('versionActionBtn'),
    checkBtn: document.getElementById('versionCheckBtn')
};

// Estado das atualiza√ß√µes
let updateState = {
    isChecking: false,
    isDownloading: false,
    updateAvailable: false,
    updateDownloaded: false,
    currentVersion: null,
    latestVersion: null
};

// Estado da notifica√ß√£o de vers√£o
let versionNotificationState = {
    isVisible: true,
    currentStatus: 'updated' // 'updated', 'available', 'downloading', 'ready'
};

// Inicializar sistema de atualiza√ß√µes
function initializeUpdateSystem() {
    console.log('üîÑ Inicializando sistema de atualiza√ß√µes...');
    
    // Carregar informa√ß√µes da aplica√ß√£o
    loadAppInfo();
    
    // Configurar event listeners
    setupUpdateEventListeners();
    
    // Inicializar notifica√ß√£o de vers√£o
    initializeVersionNotification();
    
    // Verificar atualiza√ß√µes automaticamente
    setTimeout(() => {
        checkForUpdates();
    }, 2000);
}

// ==================== NOTIFICA√á√ÉO DE VERS√ÉO ====================

// Inicializar notifica√ß√£o de vers√£o
function initializeVersionNotification() {
    console.log('üîî Inicializando notifica√ß√£o de vers√£o...');
    
    // Configurar event listeners da notifica√ß√£o
    setupVersionNotificationListeners();
    
    // Mostrar status inicial com √≠cone de setas girando
    updateVersionNotification('updated', updateState.currentVersion || '1.0.8');
}

// Configurar event listeners da notifica√ß√£o
function setupVersionNotificationListeners() {
    // Bot√£o de a√ß√£o (download)
    if (versionElements.actionBtn) {
        versionElements.actionBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            handleVersionActionClick();
        });
    }
    
    // Bot√£o de verifica√ß√£o de atualiza√ß√µes
    if (versionElements.checkBtn) {
        versionElements.checkBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            console.log('üîÑ Bot√£o de verifica√ß√£o clicado');
            addUpdateLogEntry('üîÑ Bot√£o de verifica√ß√£o clicado pelo usu√°rio', 'info');
            checkForUpdates();
        });
    }
    
    // Tornar a notifica√ß√£o inteira clic√°vel
    if (versionElements.notification) {
        versionElements.notification.addEventListener('click', () => {
            console.log('üîî Notifica√ß√£o clicada');
            handleNotificationClick();
        });
    }
}

// Lidar com clique na notifica√ß√£o
function handleNotificationClick() {
    switch (versionNotificationState.currentStatus) {
        case 'updated':
            // Se est√° atualizado, verificar novamente
            console.log('üîÑ Verificando atualiza√ß√µes via clique na notifica√ß√£o...');
            addUpdateLogEntry('üîÑ Verifica√ß√£o iniciada via clique na notifica√ß√£o', 'info');
            checkForUpdates();
            break;
        case 'available':
            // Se h√° atualiza√ß√£o dispon√≠vel, baixar
            console.log('üì• Baixando atualiza√ß√£o via clique na notifica√ß√£o...');
            addUpdateLogEntry('üì• Download iniciado via clique na notifica√ß√£o', 'info');
            downloadUpdate();
            break;
        case 'ready':
            // Se est√° pronta, instalar
            console.log('üöÄ Instalando atualiza√ß√£o via clique na notifica√ß√£o...');
            addUpdateLogEntry('üöÄ Instala√ß√£o iniciada via clique na notifica√ß√£o', 'info');
            installUpdate();
            break;
        default:
            // Para outros estados, verificar atualiza√ß√µes
            console.log('üîÑ Verificando atualiza√ß√µes via clique na notifica√ß√£o...');
            addUpdateLogEntry('üîÑ Verifica√ß√£o iniciada via clique na notifica√ß√£o', 'info');
            checkForUpdates();
            break;
    }
}

// Atualizar notifica√ß√£o de vers√£o
function updateVersionNotification(status, version = null) {
    if (!versionElements.notification) return;
    
    versionNotificationState.currentStatus = status;
    
    // Remover classes de status anteriores
    versionElements.notification.classList.remove('updated', 'update-available', 'update-downloading', 'update-ready');
    
    switch (status) {
        case 'updated':
            versionElements.icon.textContent = 'üîÑ';
            versionElements.text.textContent = `Atualizado v${version}`;
            versionElements.actionBtn.style.display = 'none';
            versionElements.checkBtn.style.display = 'flex';
            versionElements.checkBtn.textContent = 'üîÑ';
            versionElements.checkBtn.title = 'Verificar atualiza√ß√µes';
            versionElements.notification.classList.add('updated');
            // Tornar clic√°vel
            versionElements.notification.style.cursor = 'pointer';
            break;
            
        case 'available':
            versionElements.icon.textContent = 'üì•';
            versionElements.text.textContent = 'Atualiza√ß√£o dispon√≠vel';
            versionElements.actionBtn.style.display = 'flex';
            versionElements.checkBtn.style.display = 'none';
            versionElements.actionBtn.textContent = 'üì•';
            versionElements.actionBtn.title = 'Baixar atualiza√ß√£o';
            versionElements.notification.classList.add('update-available');
            versionElements.notification.style.cursor = 'pointer';
            break;
            
        case 'downloading':
            versionElements.icon.textContent = '‚è≥';
            versionElements.text.textContent = 'Baixando atualiza√ß√£o...';
            versionElements.actionBtn.style.display = 'none';
            versionElements.checkBtn.style.display = 'none';
            versionElements.notification.classList.add('update-downloading');
            versionElements.notification.style.cursor = 'default';
            break;
            
        case 'ready':
            versionElements.icon.textContent = 'üöÄ';
            versionElements.text.textContent = 'Atualiza√ß√£o pronta!';
            versionElements.actionBtn.style.display = 'flex';
            versionElements.checkBtn.style.display = 'none';
            versionElements.actionBtn.textContent = 'üîÑ';
            versionElements.actionBtn.title = 'Instalar e reiniciar';
            versionElements.notification.classList.add('update-ready');
            versionElements.notification.style.cursor = 'pointer';
            break;
            
        case 'checking':
            versionElements.icon.textContent = '‚è≥';
            versionElements.text.textContent = 'Verificando atualiza√ß√µes...';
            versionElements.actionBtn.style.display = 'none';
            versionElements.checkBtn.style.display = 'none';
            versionElements.notification.classList.add('update-downloading');
            versionElements.notification.style.cursor = 'default';
            break;
    }
    
    // Mostrar notifica√ß√£o se estava oculta
    showVersionNotification();
    
    console.log(`üîî Notifica√ß√£o atualizada: ${status} v${version}`);
}

// Mostrar notifica√ß√£o de vers√£o
function showVersionNotification() {
    if (versionElements.notification) {
        versionElements.notification.classList.remove('hidden');
        versionNotificationState.isVisible = true;
    }
}

// Ocultar notifica√ß√£o de vers√£o
function hideVersionNotification() {
    if (versionElements.notification) {
        versionElements.notification.classList.add('hidden');
        versionNotificationState.isVisible = false;
    }
}

// Lidar com clique no bot√£o de a√ß√£o
function handleVersionActionClick() {
    switch (versionNotificationState.currentStatus) {
        case 'available':
            // Baixar atualiza√ß√£o
            addUpdateLogEntry('üì• Iniciando download manual da atualiza√ß√£o...', 'info');
            downloadUpdate();
            break;
        case 'ready':
            // Instalar atualiza√ß√£o
            addUpdateLogEntry('üöÄ Iniciando instala√ß√£o da atualiza√ß√£o...', 'info');
            installUpdate();
            break;
    }
}

// Carregar informa√ß√µes da aplica√ß√£o
async function loadAppInfo() {
    try {
        if (window.electronAPI && window.electronAPI.getUpdateInfo) {
            const info = await window.electronAPI.getUpdateInfo();
            updateState.currentVersion = info.currentVersion;
            
            if (updateElements.currentVersion) {
                updateElements.currentVersion.textContent = info.currentVersion;
            }
            
            // Atualizar notifica√ß√£o de vers√£o com a vers√£o atual
            updateVersionNotification('updated', info.currentVersion);
            
            console.log('üìã Informa√ß√µes da aplica√ß√£o carregadas:', info);
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar informa√ß√µes da aplica√ß√£o:', error);
    }
}

// Configurar event listeners para atualiza√ß√µes
function setupUpdateEventListeners() {
    // Bot√£o principal de verificar atualiza√ß√µes
    if (updateElements.mainCheckUpdatesBtn) {
        updateElements.mainCheckUpdatesBtn.addEventListener('click', () => {
            console.log('üîç Bot√£o principal de verifica√ß√£o clicado');
            checkForUpdates();
        });
    }
    
    // Bot√£o de verificar atualiza√ß√µes
    if (updateElements.checkUpdatesBtn) {
        updateElements.checkUpdatesBtn.addEventListener('click', () => {
            checkForUpdates();
        });
    }
    
    // Bot√£o de baixar atualiza√ß√£o
    if (updateElements.downloadUpdateBtn) {
        updateElements.downloadUpdateBtn.addEventListener('click', () => {
            downloadUpdate();
        });
    }
    
    // Bot√£o de instalar atualiza√ß√£o
    if (updateElements.installUpdateBtn) {
        updateElements.installUpdateBtn.addEventListener('click', () => {
            installUpdate();
        });
    }
    
    // Event listeners do auto-updater
    if (window.electronAPI) {
        // Verificando atualiza√ß√µes
        window.electronAPI.onUpdateChecking(() => {
            updateStatus('Verificando atualiza√ß√µes...', 'info');
            updateState.isChecking = true;
            updateUI();
        });
        
        // Atualiza√ß√£o dispon√≠vel
        window.electronAPI.onUpdateAvailable((event, info) => {
            console.log('üì¶ Atualiza√ß√£o dispon√≠vel:', info);
            updateState.updateAvailable = true;
            updateState.latestVersion = info.version;
            updateState.isChecking = false;
            updateStatus(`Atualiza√ß√£o dispon√≠vel: v${info.version}`, 'success');
            showDownloadButton();
            
            // Restaurar bot√£o principal
            if (updateElements.mainCheckUpdatesBtn) {
                updateElements.mainCheckUpdatesBtn.disabled = false;
                updateElements.mainCheckUpdatesBtn.innerHTML = 'üîç Verificar Atualiza√ß√µes Agora';
            }
            
            // Restaurar bot√£o de verifica√ß√£o na notifica√ß√£o
            if (versionElements.checkBtn) {
                versionElements.checkBtn.disabled = false;
                versionElements.checkBtn.textContent = 'üîÑ';
                versionElements.checkBtn.title = 'Verificar atualiza√ß√µes';
            }
            
            // Atualizar notifica√ß√£o de vers√£o
            updateVersionNotification('available', info.version);
        });
        
        // Nenhuma atualiza√ß√£o dispon√≠vel
        window.electronAPI.onUpdateNotAvailable((event, info) => {
            console.log('‚úÖ Aplica√ß√£o est√° atualizada:', info);
            updateState.updateAvailable = false;
            updateState.isChecking = false;
            updateStatus('Aplica√ß√£o est√° atualizada', 'success');
            hideUpdateButtons();
            
            // Restaurar bot√£o principal
            if (updateElements.mainCheckUpdatesBtn) {
                updateElements.mainCheckUpdatesBtn.disabled = false;
                updateElements.mainCheckUpdatesBtn.innerHTML = 'üîç Verificar Atualiza√ß√µes Agora';
            }
            
            // Restaurar bot√£o de verifica√ß√£o na notifica√ß√£o
            if (versionElements.checkBtn) {
                versionElements.checkBtn.disabled = false;
                versionElements.checkBtn.textContent = 'üîÑ';
                versionElements.checkBtn.title = 'Verificar atualiza√ß√µes';
            }
            
            // Atualizar notifica√ß√£o de vers√£o
            updateVersionNotification('updated', info.version || updateState.currentVersion);
        });
        
        // Erro na verifica√ß√£o
        window.electronAPI.onUpdateError((event, error) => {
            console.error('‚ùå Erro ao verificar atualiza√ß√µes:', error);
            updateStatus(`Erro: ${error}`, 'error');
            updateState.isChecking = false;
            
            // Restaurar bot√£o principal
            if (updateElements.mainCheckUpdatesBtn) {
                updateElements.mainCheckUpdatesBtn.disabled = false;
                updateElements.mainCheckUpdatesBtn.innerHTML = 'üîç Verificar Atualiza√ß√µes Agora';
            }
            
            // Restaurar bot√£o de verifica√ß√£o na notifica√ß√£o
            if (versionElements.checkBtn) {
                versionElements.checkBtn.disabled = false;
                versionElements.checkBtn.textContent = 'üîÑ';
                versionElements.checkBtn.title = 'Verificar atualiza√ß√µes';
            }
            
            updateUI();
        });
        
        // Progresso do download
        window.electronAPI.onUpdateDownloadProgress((event, progress) => {
            console.log('üì• Progresso do download:', progress);
            updateDownloadProgress(progress);
            
            // Atualizar notifica√ß√£o de vers√£o
            updateVersionNotification('downloading');
        });
        
        // Download conclu√≠do
        window.electronAPI.onUpdateDownloaded((event, info) => {
            console.log('‚úÖ Atualiza√ß√£o baixada:', info);
            updateState.updateDownloaded = true;
            updateState.isDownloading = false;
            updateStatus('Atualiza√ß√£o baixada com sucesso!', 'success');
            showInstallButton();
            hideProgressBar();
            
            // Atualizar notifica√ß√£o de vers√£o
            updateVersionNotification('ready', info.version);
        });
    }
}

// Verificar atualiza√ß√µes
async function checkForUpdates() {
    if (updateState.isChecking || updateState.isDownloading) {
        addUpdateLogEntry('‚ö†Ô∏è Verifica√ß√£o j√° em andamento, ignorando nova solicita√ß√£o', 'warning');
        return;
    }
    
    try {
        console.log('üîç Verificando atualiza√ß√µes...');
        addUpdateLogEntry('üîç Iniciando verifica√ß√£o de atualiza√ß√µes...', 'info');
        
        updateState.isChecking = true;
        updateStatus('Verificando atualiza√ß√µes...', 'info');
        
        // Atualizar notifica√ß√£o para mostrar ampulheta
        updateVersionNotification('checking');
        
        // Atualizar bot√£o principal
        if (updateElements.mainCheckUpdatesBtn) {
            updateElements.mainCheckUpdatesBtn.disabled = true;
            updateElements.mainCheckUpdatesBtn.innerHTML = '‚è≥ Verificando...';
        }
        
        // Atualizar bot√£o de verifica√ß√£o na notifica√ß√£o
        if (versionElements.checkBtn) {
            versionElements.checkBtn.disabled = true;
            versionElements.checkBtn.textContent = '‚è≥';
            versionElements.checkBtn.title = 'Verificando...';
        }
        
        updateUI();
        
        if (window.electronAPI && window.electronAPI.checkForUpdates) {
            addUpdateLogEntry('üì° Chamando API do Electron para verificar atualiza√ß√µes...', 'info');
            const result = await window.electronAPI.checkForUpdates();
            console.log('üìã Resultado da verifica√ß√£o:', result);
            addUpdateLogEntry(`üìã Resultado da API: ${JSON.stringify(result)}`, 'info');
            
            // Processar resultado da verifica√ß√£o
            if (result.success && result.result.updateAvailable) {
                addUpdateLogEntry(`üéâ Atualiza√ß√£o dispon√≠vel: v${result.result.latestVersion}`, 'success');
                addUpdateLogEntry(`üì• Download dispon√≠vel em: ${result.result.releaseInfo.html_url}`, 'info');
                
                // Atualizar notifica√ß√£o de vers√£o
                updateVersionNotification('available', result.result.latestVersion);
                
                // Se o download foi iniciado automaticamente
                if (result.result.downloadStarted) {
                    addUpdateLogEntry('üì• Download autom√°tico iniciado...', 'info');
                    updateVersionNotification('downloading', result.result.latestVersion);
                }
            } else if (result.success) {
                addUpdateLogEntry(`‚úÖ Aplica√ß√£o est√° atualizada (v${result.result.currentVersion})`, 'success');
                updateVersionNotification('updated', result.result.currentVersion);
            }
        } else {
            addUpdateLogEntry('‚ùå API do Electron n√£o dispon√≠vel', 'error');
        }
    } catch (error) {
        console.error('‚ùå Erro ao verificar atualiza√ß√µes:', error);
        addUpdateLogEntry(`‚ùå Erro na verifica√ß√£o: ${error.message}`, 'error');
        updateStatus(`Erro: ${error.message}`, 'error');
        updateState.isChecking = false;
        
        // Restaurar bot√£o principal
        if (updateElements.mainCheckUpdatesBtn) {
            updateElements.mainCheckUpdatesBtn.disabled = false;
            updateElements.mainCheckUpdatesBtn.innerHTML = 'üîç Verificar Atualiza√ß√µes Agora';
        }
        
        // Restaurar bot√£o de verifica√ß√£o na notifica√ß√£o
        if (versionElements.checkBtn) {
            versionElements.checkBtn.disabled = false;
            versionElements.checkBtn.textContent = 'üîÑ';
            versionElements.checkBtn.title = 'Verificar atualiza√ß√µes';
        }
        
        updateUI();
    }
}

// Baixar atualiza√ß√£o
async function downloadUpdate() {
    if (updateState.isDownloading || !updateState.updateAvailable) {
        addUpdateLogEntry('‚ö†Ô∏è Download j√° em andamento ou atualiza√ß√£o n√£o dispon√≠vel', 'warning');
        return;
    }
    
    try {
        console.log('üì• Baixando atualiza√ß√£o...');
        addUpdateLogEntry('üì• Iniciando download da atualiza√ß√£o...', 'info');
        updateState.isDownloading = true;
        updateStatus('Baixando atualiza√ß√£o...', 'info');
        showProgressBar();
        updateUI();
        
        if (window.electronAPI && window.electronAPI.downloadUpdate) {
            const result = await window.electronAPI.downloadUpdate();
            console.log('üìã Resultado do download:', result);
            
            if (result.success) {
                addUpdateLogEntry('‚úÖ Download conclu√≠do com sucesso!', 'success');
                updateState.isDownloading = false;
                updateState.updateReady = true;
                updateStatus('Atualiza√ß√£o pronta para instala√ß√£o!', 'success');
                hideProgressBar();
                updateUI();
            } else {
                addUpdateLogEntry(`‚ùå Erro no download: ${result.error}`, 'error');
                updateState.isDownloading = false;
                updateStatus(`Erro: ${result.error}`, 'error');
                hideProgressBar();
                updateUI();
            }
        } else {
            addUpdateLogEntry('‚ùå API de download n√£o dispon√≠vel', 'error');
        }
    } catch (error) {
        console.error('‚ùå Erro ao baixar atualiza√ß√£o:', error);
        addUpdateLogEntry(`‚ùå Erro no download: ${error.message}`, 'error');
        updateStatus(`Erro: ${error.message}`, 'error');
        updateState.isDownloading = false;
        updateUI();
    }
}

// Instalar atualiza√ß√£o
async function installUpdate() {
    if (!updateState.updateReady) {
        addUpdateLogEntry('‚ö†Ô∏è Atualiza√ß√£o n√£o est√° pronta para instala√ß√£o', 'warning');
        return;
    }
    
    try {
        console.log('üîÑ Instalando atualiza√ß√£o...');
        addUpdateLogEntry('üöÄ Iniciando instala√ß√£o da atualiza√ß√£o...', 'info');
        updateStatus('Instalando atualiza√ß√£o e reiniciando...', 'info');
        
        if (window.electronAPI && window.electronAPI.installUpdate) {
            const result = await window.electronAPI.installUpdate();
            console.log('üìã Resultado da instala√ß√£o:', result);
            
            if (result.success) {
                addUpdateLogEntry('‚úÖ Instala√ß√£o iniciada! Aplica√ß√£o ser√° fechada...', 'success');
                addUpdateLogEntry('üîÑ Reinicie a aplica√ß√£o ap√≥s a instala√ß√£o', 'info');
            } else {
                addUpdateLogEntry(`‚ùå Erro na instala√ß√£o: ${result.error}`, 'error');
            }
        } else {
            addUpdateLogEntry('‚ùå API de instala√ß√£o n√£o dispon√≠vel', 'error');
        }
    } catch (error) {
        console.error('‚ùå Erro ao instalar atualiza√ß√£o:', error);
        addUpdateLogEntry(`‚ùå Erro na instala√ß√£o: ${error.message}`, 'error');
        updateStatus(`Erro: ${error.message}`, 'error');
    }
}

// Atualizar status
function updateStatus(message, type = 'info') {
    if (updateElements.updateStatus) {
        updateElements.updateStatus.textContent = message;
    }
    
    if (updateElements.updateMessage) {
        updateElements.updateMessage.textContent = message;
        updateElements.updateMessage.className = `update-message ${type}`;
    }
    
    console.log(`üìä Status: ${message}`);
}

// Atualizar progresso do download
function updateDownloadProgress(progress) {
    const percent = Math.round(progress.percent);
    
    if (updateElements.updateProgressFill) {
        updateElements.updateProgressFill.style.width = `${percent}%`;
    }
    
    if (updateElements.updateProgressText) {
        updateElements.updateProgressText.textContent = `${percent}%`;
    }
    
    // Atualizar status com informa√ß√µes do download
    const speed = formatBytes(progress.bytesPerSecond);
    const downloaded = formatBytes(progress.transferred);
    const total = formatBytes(progress.total);
    
    updateStatus(`Baixando: ${downloaded} / ${total} (${speed}/s)`, 'info');
}

// Mostrar bot√£o de download
function showDownloadButton() {
    if (updateElements.downloadUpdateBtn) {
        updateElements.downloadUpdateBtn.style.display = 'inline-block';
    }
    if (updateElements.checkUpdatesBtn) {
        updateElements.checkUpdatesBtn.style.display = 'none';
    }
}

// Mostrar bot√£o de instala√ß√£o
function showInstallButton() {
    if (updateElements.installUpdateBtn) {
        updateElements.installUpdateBtn.style.display = 'inline-block';
    }
    if (updateElements.downloadUpdateBtn) {
        updateElements.downloadUpdateBtn.style.display = 'none';
    }
}

// Ocultar bot√µes de atualiza√ß√£o
function hideUpdateButtons() {
    if (updateElements.downloadUpdateBtn) {
        updateElements.downloadUpdateBtn.style.display = 'none';
    }
    if (updateElements.installUpdateBtn) {
        updateElements.installUpdateBtn.style.display = 'none';
    }
    if (updateElements.checkUpdatesBtn) {
        updateElements.checkUpdatesBtn.style.display = 'inline-block';
    }
}

// Mostrar barra de progresso
function showProgressBar() {
    if (updateElements.updateProgress) {
        updateElements.updateProgress.style.display = 'block';
    }
}

// Ocultar barra de progresso
function hideProgressBar() {
    if (updateElements.updateProgress) {
        updateElements.updateProgress.style.display = 'none';
    }
}

// Atualizar UI
function updateUI() {
    // Atualizar estado dos bot√µes
    if (updateElements.mainCheckUpdatesBtn) {
        updateElements.mainCheckUpdatesBtn.disabled = updateState.isChecking || updateState.isDownloading;
    }
    if (updateElements.checkUpdatesBtn) {
        updateElements.checkUpdatesBtn.disabled = updateState.isChecking || updateState.isDownloading;
    }
    if (updateElements.downloadUpdateBtn) {
        updateElements.downloadUpdateBtn.disabled = updateState.isDownloading || !updateState.updateAvailable;
    }
    if (updateElements.installUpdateBtn) {
        updateElements.installUpdateBtn.disabled = !updateState.updateDownloaded;
    }
}

// Formatar bytes para leitura humana
function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

// Inicializar sistema de atualiza√ß√µes quando a p√°gina carregar
document.addEventListener('DOMContentLoaded', function() {
    // Aguardar um pouco para garantir que tudo esteja carregado
    setTimeout(() => {
        initializeUpdateSystem();
    }, 1000);
});

// ==================== FUNCIONALIDADES DAS ABAS ====================



// ==================== SISTEMA DE LOG DE ATUALIZA√á√ïES ====================

// Elementos DOM para log de atualiza√ß√µes
const updateLogElements = {
    container: document.getElementById('updateLogContent'),
    clearBtn: document.getElementById('clearLogBtn'),
    testBtn: document.getElementById('testUpdateBtn')
};

// Estado do log
let updateLogState = {
    entries: [],
    maxEntries: 50
};

// Inicializar sistema de log
function initializeUpdateLog() {
    console.log('üìù Inicializando sistema de log de atualiza√ß√µes...');
    
    // Configurar event listeners
    if (updateLogElements.clearBtn) {
        updateLogElements.clearBtn.addEventListener('click', clearUpdateLog);
    }
    
    if (updateLogElements.testBtn) {
        updateLogElements.testBtn.addEventListener('click', testUpdateSystem);
    }
    
    // Adicionar entrada inicial
    addUpdateLogEntry('Sistema de atualiza√ß√µes inicializado', 'info');
    
    // Configurar interceptadores de eventos
    setupUpdateEventInterceptors();
    
    console.log('‚úÖ Sistema de log de atualiza√ß√µes configurado');
}

// Adicionar entrada no log
function addUpdateLogEntry(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString('pt-BR');
    const entry = {
        time: timestamp,
        message: message,
        type: type
    };
    
    updateLogState.entries.push(entry);
    
    // Manter apenas as √∫ltimas entradas
    if (updateLogState.entries.length > updateLogState.maxEntries) {
        updateLogState.entries.shift();
    }
    
    // Atualizar interface
    updateUpdateLogDisplay();
    
    console.log(`üìù [${timestamp}] ${message}`);
}

// Atualizar exibi√ß√£o do log
function updateUpdateLogDisplay() {
    if (!updateLogElements.container) return;
    
    const html = updateLogState.entries.map(entry => {
        return `
            <div class="log-entry ${entry.type}">
                <span class="log-time">[${entry.time}]</span>
                <span class="log-message">${entry.message}</span>
            </div>
        `;
    }).join('');
    
    updateLogElements.container.innerHTML = html;
    
    // Scroll para o final
    updateLogElements.container.scrollTop = updateLogElements.container.scrollHeight;
}

// Limpar log
function clearUpdateLog() {
    updateLogState.entries = [];
    addUpdateLogEntry('Log limpo pelo usu√°rio', 'info');
}

// Testar sistema de atualiza√ß√µes
async function testUpdateSystem() {
    addUpdateLogEntry('Iniciando teste do sistema de atualiza√ß√µes...', 'info');
    
    try {
        // Verificar se a API est√° dispon√≠vel
        if (!window.electronAPI) {
            addUpdateLogEntry('‚ùå API do Electron n√£o est√° dispon√≠vel', 'error');
            return;
        }
        
        if (!window.electronAPI.checkForUpdates) {
            addUpdateLogEntry('‚ùå Fun√ß√£o checkForUpdates n√£o est√° dispon√≠vel', 'error');
            return;
        }
        
        addUpdateLogEntry('üîç Chamando checkForUpdates...', 'info');
        
        const result = await window.electronAPI.checkForUpdates();
        
        if (result.success) {
            addUpdateLogEntry('‚úÖ Verifica√ß√£o de atualiza√ß√µes executada com sucesso', 'success');
            addUpdateLogEntry(`üìã Resultado: ${JSON.stringify(result.result)}`, 'info');
            
            // Processar resultado da verifica√ß√£o
            if (result.result.updateAvailable) {
                addUpdateLogEntry(`üéâ Atualiza√ß√£o dispon√≠vel: v${result.result.latestVersion}`, 'success');
                addUpdateLogEntry(`üì• Download dispon√≠vel em: ${result.result.releaseInfo.html_url}`, 'info');
            } else {
                addUpdateLogEntry(`‚úÖ Aplica√ß√£o est√° atualizada (v${result.result.currentVersion})`, 'success');
            }
        } else {
            addUpdateLogEntry(`‚ùå Erro na verifica√ß√£o: ${result.error}`, 'error');
        }
        
    } catch (error) {
        addUpdateLogEntry(`‚ùå Erro inesperado: ${error.message}`, 'error');
        console.error('‚ùå Erro no teste de atualiza√ß√µes:', error);
    }
}

// Interceptar eventos de atualiza√ß√£o
function setupUpdateEventInterceptors() {
    if (window.electronAPI) {
        // Verificando atualiza√ß√µes
        window.electronAPI.onUpdateChecking(() => {
            addUpdateLogEntry('üîç Verificando atualiza√ß√µes...', 'info');
            addUpdateLogEntry('üì° Conectando com GitHub API...', 'info');
        });
        
        // Atualiza√ß√£o dispon√≠vel
        window.electronAPI.onUpdateAvailable((event, info) => {
            addUpdateLogEntry(`üì¶ Atualiza√ß√£o dispon√≠vel: v${info.version}`, 'success');
            addUpdateLogEntry(`üìã Detalhes: ${JSON.stringify(info)}`, 'info');
        });
        
        // Nenhuma atualiza√ß√£o dispon√≠vel
        window.electronAPI.onUpdateNotAvailable((event, info) => {
            addUpdateLogEntry(`‚úÖ Aplica√ß√£o est√° atualizada: v${info.version}`, 'success');
        });
        
        // Erro na verifica√ß√£o
        window.electronAPI.onUpdateError((event, error) => {
            addUpdateLogEntry(`‚ùå Erro ao verificar atualiza√ß√µes: ${error}`, 'error');
            
            // Analisar o tipo de erro
            if (error.includes('406')) {
                addUpdateLogEntry('üîç Erro 406: Problema com headers da requisi√ß√£o', 'warning');
                addUpdateLogEntry('üí° Solu√ß√£o: Verificar configura√ß√£o do GitHub Provider', 'info');
            } else if (error.includes('404')) {
                addUpdateLogEntry('üîç Erro 404: Reposit√≥rio n√£o encontrado', 'warning');
                addUpdateLogEntry('üí° Solu√ß√£o: Verificar se o reposit√≥rio existe e √© p√∫blico', 'info');
            } else if (error.includes('Unable to find latest version')) {
                addUpdateLogEntry('üîç Erro: N√£o consegue encontrar vers√£o mais recente', 'warning');
                addUpdateLogEntry('üí° Solu√ß√£o: Verificar se h√° releases no GitHub', 'info');
            } else if (error.includes('HttpError')) {
                addUpdateLogEntry('üîç Erro HTTP: Problema de conectividade', 'warning');
                addUpdateLogEntry('üí° Solu√ß√£o: Verificar conex√£o com internet', 'info');
            } else if (error.includes('Reposit√≥rio n√£o encontrado')) {
                addUpdateLogEntry('üîç Erro: Reposit√≥rio n√£o acess√≠vel', 'warning');
                addUpdateLogEntry('üí° Solu√ß√£o: Verificar se o reposit√≥rio AlexandreSilvestrin/XY-task existe', 'info');
            }
        });
        
        // Progresso do download
        window.electronAPI.onUpdateDownloadProgress((event, progress) => {
            const percent = Math.round(progress.percent);
            addUpdateLogEntry(`üì• Download: ${percent}% (${progress.bytesPerSecond} bytes/s)`, 'info');
        });
        
        // Download conclu√≠do
        window.electronAPI.onUpdateDownloaded((event, info) => {
            addUpdateLogEntry(`‚úÖ Atualiza√ß√£o baixada: v${info.version}`, 'success');
        });
    } else {
        addUpdateLogEntry('‚ùå API do Electron n√£o est√° dispon√≠vel', 'error');
    }
}

// Inicializar aba de configura√ß√µes
function initializeConfigTab() {
    console.log('‚öôÔ∏è Inicializando aba de configura√ß√µes...');
    
    // Carregar informa√ß√µes da aplica√ß√£o
    loadAppInfo();
    
    // Configurar event listeners da aba de configura√ß√µes
    setupConfigTabListeners();
    
    // Carregar configura√ß√µes salvas
    loadConfigSettings();
}

// Carregar informa√ß√µes da aplica√ß√£o
async function loadAppInfo() {
    try {
        if (window.electronAPI && window.electronAPI.getAppInfo) {
            const appInfo = await window.electronAPI.getAppInfo();
            
            // Atualizar informa√ß√µes na interface
            const currentVersionEl = document.getElementById('currentVersion');
            const platformEl = document.getElementById('platform');
            const architectureEl = document.getElementById('architecture');
            const serverStatusEl = document.getElementById('serverStatus');
            
            if (currentVersionEl) currentVersionEl.textContent = appInfo.version || 'Desconhecida';
            if (platformEl) platformEl.textContent = appInfo.platform || 'Desconhecida';
            if (architectureEl) architectureEl.textContent = appInfo.arch || 'Desconhecida';
            
            // Atualizar status do servidor
            updateServerStatusDisplay(appInfo.pythonRunning);
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar informa√ß√µes da aplica√ß√£o:', error);
    }
}

// Atualizar exibi√ß√£o do status do servidor
function updateServerStatusDisplay(isRunning) {
    const serverStatusEl = document.getElementById('serverStatus');
    if (serverStatusEl) {
        serverStatusEl.textContent = isRunning ? 'üü¢ Online' : 'üî¥ Offline';
        serverStatusEl.style.color = isRunning ? '#4caf50' : '#f44336';
    }
}

// Configurar event listeners da aba de configura√ß√µes
function setupConfigTabListeners() {
    // Apenas os controles do log de atualiza√ß√µes permanecem
    console.log('‚öôÔ∏è Event listeners da aba de configura√ß√µes configurados');
}

// Carregar configura√ß√µes salvas
function loadConfigSettings() {
    // Configura√ß√µes simplificadas - apenas log de atualiza√ß√µes
    console.log('‚öôÔ∏è Configura√ß√µes carregadas');
}

// Fun√ß√µes de configura√ß√£o simplificadas removidas

// ==================== CONTROLE DO PYTHON ====================

// Inicializar controle do Python
function initializePythonControl() {
    console.log('üêç Inicializando controle do Python...');
    
    // Verificar status inicial do Python
    checkPythonStatus();
    
    // Configurar bot√µes de controle do Python se existirem
    setupPythonControlButtons();
}

// Iniciar servidor Python automaticamente
async function startPythonServerAutomatically() {
    console.log('üêç Iniciando servidor Python automaticamente...');
    
    try {
        // Verificar se j√° est√° rodando
        const isRunning = await checkPythonStatus();
        if (isRunning) {
            console.log('‚úÖ Servidor Python j√° est√° rodando');
            return true;
        }
        
        // Tentar iniciar o servidor
        const result = await startPythonServer();
        if (result) {
            console.log('‚úÖ Servidor Python iniciado automaticamente');
            return true;
        } else {
            console.warn('‚ö†Ô∏è Falha ao iniciar servidor Python automaticamente');
            return false;
        }
    } catch (error) {
        console.error('‚ùå Erro ao iniciar servidor Python automaticamente:', error);
        return false;
    }
}

// Verificar status do Python
async function checkPythonStatus() {
    try {
        if (window.electronAPI && window.electronAPI.checkPythonStatus) {
            const status = await window.electronAPI.checkPythonStatus();
            console.log('üêç Status do Python:', status);
            
            // Atualizar estado do servidor
            appState.serverOnline = status.isRunning;
            
            // Atualizar interface com o status
            updatePythonStatusUI(status.isRunning);
            updateUI(); // Atualizar UI geral
            
            // Atualizar status na aba de configura√ß√µes
            updateServerStatusDisplay(status.isRunning);
            
            return status.isRunning;
        }
    } catch (error) {
        console.error('‚ùå Erro ao verificar status do Python:', error);
        appState.serverOnline = false;
        updateUI();
        updateServerStatusDisplay(false);
        return false;
    }
}

// Iniciar servidor Python manualmente
async function startPythonServer() {
    try {
        console.log('üêç Iniciando servidor Python...');
        showStatus('Iniciando servidor Python...', 'info');
        
        if (window.electronAPI && window.electronAPI.startPythonServer) {
            const result = await window.electronAPI.startPythonServer();
            
            if (result.success) {
                console.log('‚úÖ Servidor Python iniciado com sucesso');
                showStatus('Servidor Python iniciado!', 'success');
                appState.serverOnline = true;
                updatePythonStatusUI(true);
                updateUI(); // Atualizar UI geral
                updateServerStatusDisplay(true); // Atualizar aba de configura√ß√µes
                return true;
            } else {
                console.error('‚ùå Falha ao iniciar servidor Python');
                showStatus('Falha ao iniciar servidor Python', 'error');
                appState.serverOnline = false;
                updateUI();
                updateServerStatusDisplay(false); // Atualizar aba de configura√ß√µes
                return false;
            }
        } else {
            console.error('‚ùå API do Python n√£o dispon√≠vel');
            showStatus('API do Python n√£o dispon√≠vel', 'error');
            appState.serverOnline = false;
            updateUI();
            updateServerStatusDisplay(false); // Atualizar aba de configura√ß√µes
            return false;
        }
    } catch (error) {
        console.error('‚ùå Erro ao iniciar servidor Python:', error);
        showStatus('Erro ao iniciar servidor Python: ' + error.message, 'error');
        appState.serverOnline = false;
        updateUI();
        updateServerStatusDisplay(false); // Atualizar aba de configura√ß√µes
        return false;
    }
}

// Parar servidor Python
async function stopPythonServer() {
    try {
        console.log('üõë Parando servidor Python...');
        showStatus('Parando servidor Python...', 'info');
        
        if (window.electronAPI && window.electronAPI.forceStopPython) {
            const result = await window.electronAPI.forceStopPython();
            
            if (result.success) {
                console.log('‚úÖ Servidor Python parado com sucesso');
                showStatus('Servidor Python parado!', 'success');
                appState.serverOnline = false;
                updatePythonStatusUI(false);
                updateUI(); // Atualizar UI geral
                updateServerStatusDisplay(false); // Atualizar aba de configura√ß√µes
                return true;
            } else {
                console.error('‚ùå Falha ao parar servidor Python');
                showStatus('Falha ao parar servidor Python', 'error');
                return false;
            }
        } else {
            console.error('‚ùå API do Python n√£o dispon√≠vel');
            showStatus('API do Python n√£o dispon√≠vel', 'error');
            return false;
        }
    } catch (error) {
        console.error('‚ùå Erro ao parar servidor Python:', error);
        showStatus('Erro ao parar servidor Python: ' + error.message, 'error');
        return false;
    }
}

// Configurar bot√µes de controle do Python
function setupPythonControlButtons() {
    // Procurar por bot√µes de controle do Python na interface
    const startPythonBtn = document.getElementById('startPythonBtn');
    const stopPythonBtn = document.getElementById('stopPythonBtn');
    const pythonStatusIndicator = document.getElementById('pythonStatusIndicator');
    
    if (startPythonBtn) {
        startPythonBtn.addEventListener('click', async () => {
            await startPythonServer();
        });
    }
    
    if (stopPythonBtn) {
        stopPythonBtn.addEventListener('click', async () => {
            await stopPythonServer();
        });
    }
    
    // Atualizar status inicial
    checkPythonStatus().then(isRunning => {
        updatePythonStatusUI(isRunning);
    });
}

// Atualizar interface do status do Python
function updatePythonStatusUI(isRunning) {
    const pythonStatusIndicator = document.getElementById('pythonStatusIndicator');
    const startPythonBtn = document.getElementById('startPythonBtn');
    const stopPythonBtn = document.getElementById('stopPythonBtn');
    
    if (pythonStatusIndicator) {
        pythonStatusIndicator.textContent = isRunning ? 'üü¢ Online' : 'üî¥ Offline';
        pythonStatusIndicator.style.color = isRunning ? '#4caf50' : '#f44336';
    }
    
    if (startPythonBtn) {
        startPythonBtn.disabled = isRunning;
        startPythonBtn.style.display = isRunning ? 'none' : 'inline-block';
    }
    
    if (stopPythonBtn) {
        stopPythonBtn.disabled = !isRunning;
        stopPythonBtn.style.display = isRunning ? 'inline-block' : 'none';
    }
    
    // Atualizar status do servidor na aplica√ß√£o
    appState.serverOnline = isRunning;
    updateUI();
}

console.log('üì± Frontend carregado com sucesso!');
